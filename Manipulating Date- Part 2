## Merging datasets

lr_ds1<- read.table("I:/R/Loan_Cross_Sell_Logistic_Regression_Sample.CSV", sep= ",", header= T)
head(lr_ds1)

lr_ds2<- read.fwf("I:/R/Loan_Cross_Sell_Logistic_Regression_Sample_FWF.txt", width= c(6,3), sep= "|", header= T, strip.white=T)
head(lr_ds2)

lr_df<- merge(x=lr_ds1, y=lr_ds2, by= "Cust_ID")			## inner joint
head(lr_df)

=========================================================================================
inner_join<- merge(x=lr_ds1, y=lr_ds2, by= "Cust_ID")

left_join<- merge(x=lr_ds1, y=lr_ds2, by= "Cust_ID", all.x=T)
right_join<- merge(x=lr_ds1, y=lr_ds2, by= "Cust_ID", all.y=T)

outer_join<- merge(x=lr_ds1, y=lr_ds2, by= "Cust_ID", all=T)
cross_join<- merge(x=lr_ds1, y=lr_ds2)

=========================================================================================

##Relabeling the Column Name

names(lr_df)
colnames(lr_df)
---------------------------------

colnames(lr_df)[9]="Score"				## name changed in this step
colnames(lr_df)
colnames(lr_df)[colnames(lr_df)=="Score"]= "SCR"
colnames(lr_df)	
---------------------------------

names(lr_df)
names(lr_df)[9]="ScoreValue"				## name changed in this step
names(lr_df)[names(lr_df)=="ScoreValue"]= "SCR"	
names(lr_df)
---------------------------------

library(plyr)
lr_df<- rename(lr_df, c(SCR="Score") )		## Another way
colnames(lr_df)
=========================================================================================

##Converting Variable Types

str(lr_df)

lr_df$Cust_ID<- as.character(lr_df$Cust_ID)	##converting Cust_ID from Factor to Character
class(lr_df$Cust_ID)
---------------------------------
## single concept

class(lr_df$Target)
table(lr_df$Target)					## Note this

lr_df$Target<- as.factor(lr_df$Target)		## integer to Factor
class(lr_df$Target)

lr_df$Target<- as.integer(lr_df$Target)		## Factor to integer 
class(lr_df$Target)

table(lr_df$Target)					## Now Target variable values have changed from 0 & 1 to 1 & 2

lr_df$Target<- ifelse(lr_df$Target==1, 0, 1)	## Numeric convrsion i dont know how
table(lr_df$Target)
class(lr_df$Target)

lr_df$Target<- as.integer(lr_df$Target)		## using numeric to integer w/o changing values
table(lr_df$Target)
class(lr_df$Target)
=========================================================================================

lr_df$Target<- as.factor(lr_df$Target)		## how Factor is converting into Integer
levels(lr_df$Target)

lr_df$Target<- as.integer( levels (lr_df$Target) )[lr_df$Target]
class(lr_df$Target)
levels(lr_df$Target)
table(lr_df$Target)
---------------------------------

lr_df$Target<- as.factor(lr_df$Target)
lr_df$Target<- as.integer( as.character(lr_df$Target) )	
class(lr_df$Target)
table(lr_df$Target)

## evels() better approach than type casting to as.character() to integer. With as.charcater() issues with missing values
=========================================================================================

## Data Sorting

attach(lr_df)						##bcoz of attach() we do not need to prefix column names by data frame name

lr_df_sorted<- lr_df [order(Age), ]
head(lr_df_sorted)
lr_df_sorted<- lr_df [order(Age, Balance), ]	## Ascending
head(lr_df_sorted)

lr_df_sorted<- lr_df [order(-Age, Balance), ]	## Descending
head(lr_df_sorted)

detach(lr_df)
---------------------------------

salary<- c(1:3, 2:7, 1:6)
salary
sort(salary)
=========================================================================================	

## table and with 

table(lr_df$AGE_BKT)						## Frequency Distribution

table(lr_df$AGE_BKT, lr_df$Gender)				## Cross Tabulation

with(lr_df, table(lr_df$AGE_BKT) )				## Frequency Distribution with col names

with(lr_df, table(lr_df$AGE_BKT, lr_df$Gender)	)	## Cross Tabulation with col names	

as.data.frame(with(lr_df, table(lr_df$AGE_BKT) ) )	## Vertical Frequency Distribution with col names

=========================================================================================	

## Groupby

library(plyr)
ddply(lr_df, c("AGE_BKT", "Gender"), function(df)c(sum(df$Balance), min(df$Balance), max(df$Balance) ) )

ddply(lr_df, c("AGE_BKT", "Gender"), function(df)data.frame(sum(df$Balance), min(df$Balance), max(df$Balance) ) )

ddply(lr_df, .(AGE_BKT, Gender), summarize, sum_balance=sum(Balance), min_balance=min(Balance), max_balance=max(Balance) )
					
=========================================================================================	

## apply, sapply, lapply

apply(data.frame(lr_df$Balance, lr_df$No_OF_CR_TXNS), 2, mean) 			## 2 is col and 1 will be row

lapply(lr_df[, names(lr_df) %in% c("Age", "SCR")],mean)	   			## Returns as list	

sapply(lr_df[, names(lr_df) %in% c("Age", "SCR")],mean)	   			## Returns as vector	
---------------------------------

df_numeric<- lr_df[, lapply(lr_df, class) %in% c("numeric", "integer") ]	## create dataset with only numeric/integer

head(df_numeric)
---------------------------------

tapply(lr_df$SCR, lr_df$AGE_BKT, mean)				## Returns mean for each category

tapply(lr_df$SCR, list(lr_df$AGE_BKT, lr_df$Gender), mean)
tapply(lr_df$SCR, list(lr_df$AGE_BKT, lr_df$Occupation), mean)

=========================================================================================	


merge()
cbind()

names()
colnames()
rename()

str()
as.integer/numeric/character/factor/Date/complex()

order()
sort()

table()
with()
as.data.frame()
ddply()

apply()
lapply()
sapply()
tapply()






















